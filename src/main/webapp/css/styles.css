
/* only do grid on landscape screens */
@media (min-width: 40em) {
    #grid {
        display: grid;
        grid-template-rows: 1fr auto;
        grid-template-columns: 10rem 1fr;
        height: 100vh;
    }

    #grid > aside {
        grid-row: 1 / 3;
        grid-column: 1 / 2;
        background-color: var(--pico-card-background-color);
        padding: 1em 0.5em 0;
        border-right: 1px solid var(--pico-muted-border-color);
        display: flex;
        flex-direction: column;
        z-index: 1;
    }

    #grid > #main {
        grid-row: 1 / 2;
        grid-column: 2 / 3;
        padding: 1em;
    }

    #grid > footer {
        grid-row: 2 / 3;
        grid-column: 2 / 3;
        height: 2em;
        padding: 0 1em;
    }
}
@media (max-width: 40em) {
    #grid {
        display: flex;
        flex-direction: column;
        height: 100vh;
    }

    #grid > aside {
        background-color: var(--pico-card-background-color);
        padding: 1em 0.5em 0;
        border-bottom: 1px solid var(--pico-muted-border-color);
        display: flex;
        flex-direction: column;
        z-index: 1;
    }

    #grid > #main {
        padding: 1em;
        flex: 1;
    }

    #grid > footer {
        height: 2em;
        padding: 0 1em;
    }
}

#grid > footer {
    display: flex;
    & > small:nth-child(1) {
        flex-grow: 1;
    }
}

#main-nav a[aria-current="page"] {
    --pico-background-color: var(--pico-contrast-background);
    --pico-color: var(--pico-contrast-inverse);
    --pico-border-radius: 0;
}

/* Since pico.css provides their own modal in form of dialog element, we may hid unpoly modals */
up-modal-backdrop {
    visibility:hidden
}

/* If we employ dialog, we add our own dimiss button */
up-modal-content:has(dialog) + up-modal-dismiss {
    visibility:hidden
}


up-drawer-dismiss[role=button] {
    background-color: transparent;
    border: 0px none;
    color: var(--pico-muted-color);
}

up-drawer-content .grid {
    grid-template-columns:1fr
}

#flash article {
    background-color: rgb(215, 251, 193); // --pico-green-50
}

.new-fragment {
    transition: outline-color 2s ease;
    outline: rgba(218, 190, 115, 0) 12px solid !important;
    &.inserted {
        outline-color: rgba(218, 190, 115, 0.7) !important;
    }
}

[x-cloak] {
    display: none !important;
}

fieldset[aria-invalid="true"] {
    outline: var(--pico-border-width) solid var(--pico-form-element-invalid-border-color);
    outline-offset: var(--pico-border-radius);
}

fieldset[aria-invalid="true"] small:last-of-type {
    color: var(--pico-form-element-invalid-border-color);
}

.chart-box {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: var(--pico-block-spacing-vertical);
}
.chart-box > * {
    background-color: #f0f0f0;
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    aspect-ratio: 1/1;
}
#chart-container {
    position:relative;
    display: flex;
    width: 100%;
    flex-direction: column;
    min-height: 100px;
}
.action-log summary span {
    font-weight:bold;
}
.comment-list li {
    list-style-type: none;
}

.comment-list {
    padding-left: 0;
}

.comment-header {
    color: var(--pico-muted-color);
    display: block;
}

.comment-header .author {
    font-weight: bold;
}

bar-chart {
    width: 24px;
    height: 1rem;
    display: inline-flex;
    align-items: flex-end;
    justify-content: flex-end;
    --h: 0;
}

bar {
    width: 3px;
    margin-left: 2px;
    background-color: color-mix(in hsl, var(--pico-muted-color) 50%, white);
    height: var(--h);
    transform-origin: bottom;
    flex-shrink: 0;
}

@keyframes moveLeft {
    from {
        transform: translateX(0);
    }
    to {
        transform: translateX(-5px);
    }
}

@keyframes disappear {
    from {
        opacity: 1;
    }
    to {
        opacity: 0;
    }
}

bar-chart.polled {
    animation: moveLeft 4s forwards;
}

bar-chart + span {
    width: 2.75rem;
    display: inline-block;
}

bar-chart:has(bar:nth-child(5)) bar:first-child {
    animation: disappear 4s forwards;
}

bar-chart bar:last-child {
    animation: grow 0.2s forwards;
}

@keyframes grow {
    from {
        transform: scaleY(0);
    }
    to {
        transform: scaleY(100%);
    }
}

*:has(> a.instruction) {
    position:relative;
    &:hover .instruction {
        display: block;
    }
}


a.instruction {
    position: absolute;
    display: none;
    margin: 0;
    padding: inherit;
    padding-left: 0.5em;
    padding-right: 0.5em;
    right: 1em;
    top: 0;
    text-decoration: none;
    background-color: rgb(215, 251, 193); /* --pico-green-50*/
    &:hover {
      color: white;
      background-color: rgb(32, 81, 7); /* --pico-green-700*/
      transition: background-color 0.2s;
    }
}